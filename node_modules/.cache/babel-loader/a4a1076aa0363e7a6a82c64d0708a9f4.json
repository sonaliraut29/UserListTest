{"ast":null,"code":"var _jsxFileName = \"/var/www/html/userslist/src/Components/Users/Users.js\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getUserList } from '../../stores/actions/user';\nimport { useHistory } from \"react-router-dom\";\nimport Button from 'react-bootstrap/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TablePagination, TableSortLabel } from '@material-ui/core';\n\nconst Users = props => {\n  const history = useHistory();\n  const classes = useStyles(); //page represents current page number\n\n  const [page, setPage] = useState(0); // rowsPerPage represents records to be shown in one page\n\n  const [rowsPerPage, setRowsPerPage] = useState(5); // sortDirection represents sorting direction asc (ascending) and desc (descending)\n\n  const [sortDirection, setSortDirection] = useState('asc'); // columnToSort represents current column to be sorted\n\n  const [columnToSort, setColumnToSort] = useState('name');\n  /**\n  *\n  * @param {object} event represents dom event\n  * @param {int} newPage represents changed page\n  */\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  /**\n   *\n   * @param {object} event represents dom event\n   */\n\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  /**\n   * invertDirection will make sorting\n   * direction value reverse.\n   * if existing is asc (ascending)\n   * then desc (descending)\n   * and vice versa\n   */\n\n\n  const invertDirection = {\n    asc: 'desc',\n    desc: 'asc'\n  };\n  /**\n   *\n   * @param {string} columnName represents\n   * column to sort\n   * handleSorting changes the\n   * sorting column value\n   * and sorting direction value in state\n   */\n\n  const handleSorting = columnName => {\n    setColumnToSort(columnName);\n\n    if (columnToSort === columnName) {\n      setSortDirection(invertDirection[sortDirection]);\n    } else {\n      setSortDirection('asc');\n    }\n  };\n\n  const sortedweatherStationList = orderBy(weatherStationList, columnToSort, sortDirection);\n  let {\n    users,\n    userType\n  } = useSelector(state => state.User);\n  const dispatchActions = useDispatch();\n\n  const getUsers = () => {\n    dispatchActions(getUserList());\n  };\n\n  useEffect(() => {\n    if (userType === 0) {\n      history.push(\"/\");\n    }\n\n    getUsers();\n  }, []);\n\n  const handlePopup = () => {\n    props.history.push(`/createUser`);\n  };\n\n  const useStyles = makeStyles({\n    root: {\n      width: '100%'\n    },\n    container: {// maxHeight: 440,\n    },\n    empty_data: {\n      color: '#1b3f71',\n      margin: '6% 6%'\n    },\n    titleRow: {\n      margin: '6px 24px',\n      marginLeft: '2%',\n      padding: '10px'\n    }\n  });\n\n  if (Array.isArray(weatherStationList) && weatherStationList.length > 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Paper, {\n      className: classes.addPortalRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: classes.titleRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 19\n      }\n    }, \"Users List\")))), /*#__PURE__*/React.createElement(Paper, {\n      className: classes.root,\n      \"data-testid\": \"weather-station-device-list-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableContainer, {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      stickyHeader: true,\n      \"aria-label\": \"sticky table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      className: \"vms_list_th\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => handleSorting('id'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TableSortLabel, {\n      active: true,\n      direction: columnToSort === 'id' ? sortDirection : 'asc',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 27\n      }\n    }), t('Common.List.DeviceID'))), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => handleSorting('name'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TableSortLabel, {\n      active: true,\n      direction: columnToSort === 'name' ? sortDirection : 'asc',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 27\n      }\n    }), t('Common.List.DeviceName'))), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => handleSorting('status'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TableSortLabel, {\n      active: true,\n      direction: columnToSort === 'status' ? sortDirection : 'asc',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 27\n      }\n    }), t('Common.List.Status.Status'))), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => handleSorting('registration'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TableSortLabel, {\n      active: true,\n      direction: columnToSort === 'registration' ? sortDirection : 'asc',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 27\n      }\n    }), t('Common.List.Registration.Registration'))), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => handleSorting('lastUpdate'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TableSortLabel, {\n      active: true,\n      direction: columnToSort === 'lastUpdate' ? sortDirection : 'asc',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 27\n      }\n    }), t('Common.List.LastUpdate'))))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 19\n      }\n    }, sortedweatherStationList.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\n      return /*#__PURE__*/React.createElement(TableRow, {\n        key: `${row.id}-${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(TableCell, {\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 29\n        }\n      }, row && row.id ? row.id : null), /*#__PURE__*/React.createElement(TableCell, {\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 29\n        }\n      }, row && row.name ? row.name : null), /*#__PURE__*/React.createElement(TableCell, {\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 29\n        }\n      }, row && row.status ? row.status : null), /*#__PURE__*/React.createElement(TableCell, {\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 29\n        }\n      }, row && row.registration ? row.registration : null), /*#__PURE__*/React.createElement(TableCell, {\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 29\n        }\n      }, row && row.lastUpdate ? row.lastUpdate : null));\n    })))), /*#__PURE__*/React.createElement(TablePagination, {\n      rowsPerPageOptions: [5, 10, 15],\n      component: \"div\",\n      count: props && props.weatherStationList ? props.weatherStationList.length : 0,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      labelRowsPerPage: t('vms-management.rowsPerPage'),\n      onChangePage: handleChangePage,\n      onChangeRowsPerPage: handleChangeRowsPerPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 15\n      }\n    })));\n  } else if (typeof weatherStationList === 'string') {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.empty_data,\n      \"data-testid\": \"error-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }\n    }, t('Common.Vms-Management.error'));\n  } else if (Array.isArray(weatherStationList) && weatherStationList.length === 0) {\n    return /*#__PURE__*/React.createElement(\"h4\", {\n      className: classes.empty_data,\n      \"data-testid\": \"empty-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }\n    }, t('Common.List.noRecordShown'));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }\n  }, \"Test\"));\n};\n\nexport default Users;","map":{"version":3,"sources":["/var/www/html/userslist/src/Components/Users/Users.js"],"names":["React","useEffect","useSelector","useDispatch","getUserList","useHistory","Button","makeStyles","Grid","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TablePagination","TableSortLabel","Users","props","history","classes","useStyles","page","setPage","useState","rowsPerPage","setRowsPerPage","sortDirection","setSortDirection","columnToSort","setColumnToSort","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","invertDirection","asc","desc","handleSorting","columnName","sortedweatherStationList","orderBy","weatherStationList","users","userType","state","User","dispatchActions","getUsers","push","handlePopup","root","width","container","empty_data","color","margin","titleRow","marginLeft","padding","Array","isArray","length","addPortalRow","t","slice","map","row","index","id","name","status","registration","lastUpdate"],"mappings":"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","sourcesContent":["import React,{useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getUserList } from '../../stores/actions/user';\nimport { useHistory } from \"react-router-dom\";\nimport Button from 'react-bootstrap/Button';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Grid,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  TableSortLabel,\n} from '@material-ui/core';\n\nconst Users = (props) => {\n    const history = useHistory();\n    const classes = useStyles();\n    //page represents current page number\n    const [page, setPage] = useState(0);\n    // rowsPerPage represents records to be shown in one page\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n    // sortDirection represents sorting direction asc (ascending) and desc (descending)\n    const [sortDirection, setSortDirection] = useState('asc');\n    // columnToSort represents current column to be sorted\n    const [columnToSort, setColumnToSort] = useState('name');\n \n    /**\n   *\n   * @param {object} event represents dom event\n   * @param {int} newPage represents changed page\n   */\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n    /**\n     *\n     * @param {object} event represents dom event\n     */\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n    /**\n     * invertDirection will make sorting\n     * direction value reverse.\n     * if existing is asc (ascending)\n     * then desc (descending)\n     * and vice versa\n     */\n    const invertDirection = {\n        asc: 'desc',\n        desc: 'asc',\n    };\n    /**\n     *\n     * @param {string} columnName represents\n     * column to sort\n     * handleSorting changes the\n     * sorting column value\n     * and sorting direction value in state\n     */\n    const handleSorting = (columnName) => {\n        setColumnToSort(columnName);\n        if (columnToSort === columnName) {\n        setSortDirection(invertDirection[sortDirection]);\n        } else {\n        setSortDirection('asc');\n        }\n    };\n\n    const sortedweatherStationList = orderBy(\n        weatherStationList,\n        columnToSort,\n        sortDirection\n    );\n    let {users, userType} =  useSelector( state => state.User );\n\n    const dispatchActions = useDispatch();\n\n    const getUsers =  () => {\n        dispatchActions(getUserList());\n   }\n\n   useEffect( () => {\n        if(userType === 0){\n            history.push(\"/\");\n        }\n        getUsers();\n    }, []);\n\n\n    const handlePopup = () => {\n\t\tprops.history.push(`/createUser`);\n    }\n    \n    const useStyles = makeStyles({\n        root: {\n          width: '100%',\n        },\n        container: {\n          // maxHeight: 440,\n        },\n        empty_data: {\n          color: '#1b3f71',\n          margin: '6% 6%',\n        },\n        titleRow: {\n          margin: '6px 24px',\n          marginLeft: '2%',\n          padding: '10px',\n        },\n    });\n\n    if (\n        Array.isArray(weatherStationList) &&\n        weatherStationList.length > 0\n      ) {\n        return (\n          <div className={classes.root}>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Paper className={classes.addPortalRow}>\n                  <p className={classes.titleRow}>\n                    Users List\n                  </p>\n                </Paper>\n              </Grid>\n            </Grid>\n            <Paper\n              className={classes.root}\n              data-testid='weather-station-device-list-title'\n            >\n              <TableContainer className={classes.container}>\n                <Table stickyHeader aria-label='sticky table'>\n                  <TableHead>\n                    <TableRow className='vms_list_th'>\n                      <TableCell align='left'>\n                        <div onClick={() => handleSorting('id')}>\n                          <TableSortLabel\n                            active={true}\n                            direction={\n                              columnToSort === 'id'\n                                ? sortDirection\n                                : 'asc'\n                            }\n                          />\n                          {t('Common.List.DeviceID')}\n                        </div>\n                      </TableCell>\n                      <TableCell align='left'>\n                        <div onClick={() => handleSorting('name')}>\n                          <TableSortLabel\n                            active={true}\n                            direction={\n                              columnToSort === 'name'\n                                ? sortDirection\n                                : 'asc'\n                            }\n                          />\n                          {t('Common.List.DeviceName')}\n                        </div>\n                      </TableCell>\n                      <TableCell align='left'>\n                        <div onClick={() => handleSorting('status')}>\n                          <TableSortLabel\n                            active={true}\n                            direction={\n                              columnToSort === 'status'\n                                ? sortDirection\n                                : 'asc'\n                            }\n                          />\n                          {t('Common.List.Status.Status')}\n                        </div>\n                      </TableCell>\n                      <TableCell align='left'>\n                        <div\n                          onClick={() => handleSorting('registration')}\n                        >\n                          <TableSortLabel\n                            active={true}\n                            direction={\n                              columnToSort === 'registration'\n                                ? sortDirection\n                                : 'asc'\n                            }\n                          />\n                          {t('Common.List.Registration.Registration')}\n                        </div>\n                      </TableCell>\n                      <TableCell align='left'>\n                        <div onClick={() => handleSorting('lastUpdate')}>\n                          <TableSortLabel\n                            active={true}\n                            direction={\n                              columnToSort === 'lastUpdate'\n                                ? sortDirection\n                                : 'asc'\n                            }\n                          />\n                          {t('Common.List.LastUpdate')}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {sortedweatherStationList\n                      .slice(\n                        page * rowsPerPage,\n                        page * rowsPerPage + rowsPerPage\n                      )\n                      .map((row, index) => {\n                        return (\n                          <TableRow key={`${row.id}-${index}`}>\n                            <TableCell align='left'>\n                              {row && row.id ? row.id : null}\n                            </TableCell>\n                            <TableCell align='left'>\n                              {row && row.name ? row.name : null}\n                            </TableCell>\n                            <TableCell align='left'>\n                              {row && row.status ? row.status : null}\n                            </TableCell>\n                            <TableCell align='left'>\n                              {row && row.registration\n                                ? row.registration\n                                : null}\n                            </TableCell>\n                            <TableCell align='left'>\n                              {row && row.lastUpdate\n                                ? row.lastUpdate\n                                : null}\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 15]}\n                component='div'\n                count={\n                  props && props.weatherStationList\n                    ? props.weatherStationList.length\n                    : 0\n                }\n                rowsPerPage={rowsPerPage}\n                page={page}\n                labelRowsPerPage={t('vms-management.rowsPerPage')}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n              />\n            </Paper>\n          </div>\n        );\n      } else if (typeof weatherStationList === 'string') {\n        return (\n          <div className={classes.empty_data} data-testid='error-data'>\n            {t('Common.Vms-Management.error')}\n          </div>\n        );\n      } else if (\n        Array.isArray(weatherStationList) &&\n        weatherStationList.length === 0\n      ) {\n        return (\n          <h4 className={classes.empty_data} data-testid='empty-data'>\n            {t('Common.List.noRecordShown')}\n          </h4>\n        );\n      }\n\n    return (\n        <div>\n            <div>\n                \n            </div>\n            <div>\n                Test\n                {/* <Datatables data = {users} type = \"userlist\" /> */}\n            </div>\n        </div>\n        \n    )\n}\n\nexport default Users;\n"]},"metadata":{},"sourceType":"module"}