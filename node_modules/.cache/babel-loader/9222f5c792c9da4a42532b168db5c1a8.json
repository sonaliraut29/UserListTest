{"ast":null,"code":"var _jsxFileName = \"/var/www/html/userslist/src/Components/Users/Users.js\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getUserList } from '../../stores/actions/user';\nimport { useHistory } from \"react-router-dom\";\nimport Button from 'react-bootstrap/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TablePagination, TableSortLabel } from '@material-ui/core';\n\nconst Users = props => {\n  const history = useHistory();\n  const classes = useStyles(); //page represents current page number\n\n  const [page, setPage] = useState(0); // rowsPerPage represents records to be shown in one page\n\n  const [rowsPerPage, setRowsPerPage] = useState(5); // sortDirection represents sorting direction asc (ascending) and desc (descending)\n\n  const [sortDirection, setSortDirection] = useState('asc'); // columnToSort represents current column to be sorted\n\n  const [columnToSort, setColumnToSort] = useState('name');\n  /**\n  *\n  * @param {object} event represents dom event\n  * @param {int} newPage represents changed page\n  */\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  /**\n   *\n   * @param {object} event represents dom event\n   */\n\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  /**\n   * invertDirection will make sorting\n   * direction value reverse.\n   * if existing is asc (ascending)\n   * then desc (descending)\n   * and vice versa\n   */\n\n\n  const invertDirection = {\n    asc: 'desc',\n    desc: 'asc'\n  };\n  /**\n   *\n   * @param {string} columnName represents\n   * column to sort\n   * handleSorting changes the\n   * sorting column value\n   * and sorting direction value in state\n   */\n\n  const handleSorting = columnName => {\n    setColumnToSort(columnName);\n\n    if (columnToSort === columnName) {\n      setSortDirection(invertDirection[sortDirection]);\n    } else {\n      setSortDirection('asc');\n    }\n  };\n\n  const sortedweatherStationList = orderBy(weatherStationList, columnToSort, sortDirection);\n  let {\n    users,\n    userType\n  } = useSelector(state => state.User);\n  const dispatchActions = useDispatch();\n\n  const getUsers = () => {\n    dispatchActions(getUserList());\n  };\n\n  useEffect(() => {\n    if (userType === 0) {\n      history.push(\"/\");\n    }\n\n    getUsers();\n  }, []);\n\n  const handlePopup = () => {\n    props.history.push(`/createUser`);\n  };\n\n  const useStyles = makeStyles({\n    root: {\n      width: '100%'\n    },\n    container: {// maxHeight: 440,\n    },\n    empty_data: {\n      color: '#1b3f71',\n      margin: '6% 6%'\n    },\n    titleRow: {\n      margin: '6px 24px',\n      marginLeft: '2%',\n      padding: '10px'\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, userType === 1 && /*#__PURE__*/React.createElement(Button, {\n    className: \"btn btn-primary\",\n    onClick: handlePopup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 37\n    }\n  }, \"Add User\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, \"Test\"));\n};\n\nexport default Users;","map":{"version":3,"sources":["/var/www/html/userslist/src/Components/Users/Users.js"],"names":["React","useEffect","useSelector","useDispatch","getUserList","useHistory","Button","makeStyles","Grid","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TablePagination","TableSortLabel","Users","props","history","classes","useStyles","page","setPage","useState","rowsPerPage","setRowsPerPage","sortDirection","setSortDirection","columnToSort","setColumnToSort","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","invertDirection","asc","desc","handleSorting","columnName","sortedweatherStationList","orderBy","weatherStationList","users","userType","state","User","dispatchActions","getUsers","push","handlePopup","root","width","container","empty_data","color","margin","titleRow","marginLeft","padding"],"mappings":"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","sourcesContent":["import React,{useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getUserList } from '../../stores/actions/user';\nimport { useHistory } from \"react-router-dom\";\nimport Button from 'react-bootstrap/Button';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Grid,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  TableSortLabel,\n} from '@material-ui/core';\n\nconst Users = (props) => {\n    const history = useHistory();\n    const classes = useStyles();\n    //page represents current page number\n    const [page, setPage] = useState(0);\n    // rowsPerPage represents records to be shown in one page\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n    // sortDirection represents sorting direction asc (ascending) and desc (descending)\n    const [sortDirection, setSortDirection] = useState('asc');\n    // columnToSort represents current column to be sorted\n    const [columnToSort, setColumnToSort] = useState('name');\n \n    /**\n   *\n   * @param {object} event represents dom event\n   * @param {int} newPage represents changed page\n   */\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n    /**\n     *\n     * @param {object} event represents dom event\n     */\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n    /**\n     * invertDirection will make sorting\n     * direction value reverse.\n     * if existing is asc (ascending)\n     * then desc (descending)\n     * and vice versa\n     */\n    const invertDirection = {\n        asc: 'desc',\n        desc: 'asc',\n    };\n    /**\n     *\n     * @param {string} columnName represents\n     * column to sort\n     * handleSorting changes the\n     * sorting column value\n     * and sorting direction value in state\n     */\n    const handleSorting = (columnName) => {\n        setColumnToSort(columnName);\n        if (columnToSort === columnName) {\n        setSortDirection(invertDirection[sortDirection]);\n        } else {\n        setSortDirection('asc');\n        }\n    };\n\n    const sortedweatherStationList = orderBy(\n        weatherStationList,\n        columnToSort,\n        sortDirection\n    );\n    let {users, userType} =  useSelector( state => state.User );\n\n    const dispatchActions = useDispatch();\n\n    const getUsers =  () => {\n        dispatchActions(getUserList());\n   }\n\n   useEffect( () => {\n        if(userType === 0){\n            history.push(\"/\");\n        }\n        getUsers();\n    }, []);\n\n\n    const handlePopup = () => {\n\t\tprops.history.push(`/createUser`);\n    }\n    \n    const useStyles = makeStyles({\n        root: {\n          width: '100%',\n        },\n        container: {\n          // maxHeight: 440,\n        },\n        empty_data: {\n          color: '#1b3f71',\n          margin: '6% 6%',\n        },\n        titleRow: {\n          margin: '6px 24px',\n          marginLeft: '2%',\n          padding: '10px',\n        },\n    });\n\n    return (\n        <div>\n            <div>\n                { userType === 1 && <Button className = \"btn btn-primary\" onClick = {handlePopup}>Add User</Button>}\n            </div>\n            <div>\n                Test\n                {/* <Datatables data = {users} type = \"userlist\" /> */}\n            </div>\n        </div>\n        \n    )\n}\n\nexport default Users;\n"]},"metadata":{},"sourceType":"module"}